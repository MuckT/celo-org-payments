#!/usr/local/bin/node

const fs = require("fs");
const path = require("path");
const child_process = require("child_process");

const VERSIONS = ["major", "minor", "patch"];

const versionCommand = process.argv[process.argv.length - 1];

if (!VERSIONS.includes(versionCommand)) {
  console.log("invalid command, please use one of", VERSIONS.join(", "));
  process.exit(1);
}

const packagesFolder = path.join(__dirname, "..", "packages");
const folders = fs.readdirSync(packagesFolder);

const packages = folders.map((folder) => {
  return JSON.parse(
    fs
      .readFileSync(path.join(packagesFolder, folder, "package.json"))
      .toString()
  );
});

function incrementVersion(currentVersion, command) {
  const index = VERSIONS.indexOf(command);
  return currentVersion
    .split(".")
    .map((v, i) => (i === index ? parseInt(v) + 1 : v))
    .join(".");
}

packages.forEach(({ name, version }) => {
  console.log(name, version, "=>", incrementVersion(version, versionCommand));
});

const { version: oldVersion } = packages[0];
const newVersion = incrementVersion(oldVersion, versionCommand);

folders.forEach((folder) => {
  const packageJson = JSON.parse(
    fs
      .readFileSync(path.join(packagesFolder, folder, "package.json"))
      .toString()
  );
  console.log(
    packageJson.name,
    packageJson.version,
    "=>",
    incrementVersion(packageJson.version, versionCommand)
  );

  const newDependencies = Object.keys(packageJson.dependencies).reduce(
    (accum, packageName) => {
      return {
        ...accum,
        [packageName]: packageName.startsWith("@celo/payments-")
          ? newVersion
          : packageJson.dependencies[packageName],
      };
    },
    {}
  );

  console.log(
    JSON.stringify(
      {
        ...packageJson,
        version: newVersion,
        dependencies: newDependencies,
      },
      null,
      2
    )
  );
  // fs.writeFileSync(
  //   path.join(packagesFolder, folder, "package.json"),
  //   JSON.stringify(
  //     {
  //       name,
  //       version: newVersion,
  //       dependencies: newDependencies,
  //       ...rest,
  //     },
  //     null,
  //     2
  //   )
  // );
});
